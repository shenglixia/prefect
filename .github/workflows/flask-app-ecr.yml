name: Build and Deploy Flask App to ECR

on:
  push:
    branches: [ main, master ]
    paths:
      - 'app.py'
      - 'requirements.txt'
      - 'Dockerfile'
      - '.github/workflows/flask-app-ecr.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'app.py'
      - 'requirements.txt'
      - 'Dockerfile'
      - '.github/workflows/flask-app-ecr.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: my-app

jobs:
  test:
    name: Test Flask Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests
        run: |
          python -c "import app; print('App imports successfully')"
          python -c "from app import app as flask_app; print('Flask app created successfully')"
          python -m pytest test_app.py -v

      - name: Test Docker build
        run: |
          docker build -t flask-app-test -f Dockerfile.flask .
          docker run --rm flask-app-test python -c "import app; print('Docker build test passed')"

  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    environment: ${{ github.event.inputs.environment || 'development' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate image tags
        id: image-tags
        run: |
          # Get the short SHA
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          
          # Create tags
          echo "tags=latest,$SHORT_SHA" >> $GITHUB_OUTPUT
          
          # If it's a tag, also use the tag name
          if [[ ${{ github.ref }} == refs/tags/* ]]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            echo "tags=latest,$SHORT_SHA,$TAG_NAME" >> $GITHUB_OUTPUT
          fi
          
          # Add environment tag
          ENV_TAG="${{ github.event.inputs.environment || 'development' }}"
          echo "env_tag=$ENV_TAG" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.flask
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.image-tags.outputs.env_tag }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.image-tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Output image URI
        run: |
          echo "Image pushed successfully!"
          echo "Repository: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}"
          echo "Tags: ${{ steps.image-tags.outputs.tags }}"
          echo "Environment: ${{ steps.image-tags.outputs.env_tag }}"

  deploy-notification:
    name: Deploy Notification
    runs-on: ubuntu-latest
    needs: build-and-push
    if: always() && github.event_name != 'pull_request'
    steps:
      - name: Notify deployment
        run: |
          if [ "${{ needs.build-and-push.result }}" == "success" ]; then
            echo "‚úÖ Deployment successful!"
            echo "üöÄ Image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.image-tags.outputs.env_tag }}"
            echo "üì¶ Next steps: Deploy to ECS/EKS or run with docker run"
          else
            echo "‚ùå Deployment failed!"
            echo "Check the build-and-push job for details"
          fi 